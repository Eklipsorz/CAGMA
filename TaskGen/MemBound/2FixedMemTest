#!/bin/bash 

# This program can simulate that multiple memory-bound tasks at the same time 
# via running program, called FixedAccMem. Their execution time and memory 
# usage are controlled and the program change. The total memory usage of each 
# round for obtaining results on different memory usages

# set main program, which is used to simulate different memory usages 
wpoint="FixedAccMem"

echo "Simulation: initialize library and some variables"

# enable or disable CAGMA run in Xen environment 
enable_test_CAGMA=1

export LD_LIBRARY_PATH=/usr/lib


# set the total memory usage for each round 
# the number of rounds is detemined by the length of array arrvm2
# array[round]=the_number_of_tasks_at_the_same_time
arrvm2[1]=2
arrvm2[2]=2
arrvm2[3]=2
arrvm2[4]=9
arrvm2[5]=9
arrvm2[6]=9
arrvm2[7]=9
arrvm2[8]=9
arrvm2[9]=9
############Additional
arrvm2[10]=9

# clear dirty pages for adding usable memory space
echo 3 > /proc/sys/vm/drop_caches


# set a callback function of a trap, which is only triggered by CTRL-C
# when a user press CTRL-C , then the system automatically stops the execution
# of each main program, stops the execution of the tools for collecting IOPS
# and remove necessary modules from the guest OS
trap trapContrC INT
function trapContrC(){
	
	# stop the execution of each main programs
	for id in $(pidof $wpoint)
	do
		kill -9 $id
	done

	# stop the execution of the tools for collecting IOPS 
	sarpid=$(pidof sar)
	kill -9 $sarpid

	# remove some modules 
	rmmod MemDataCollector.ko
	rmmod supCenter.ko
	rmmod resetCMA.ko
	exit	
}

# kill all main programs
function killWpoint(){
	
	for id in $(pidof $wpoint)
	do
		kill -9 $id
	done

}

# kill all main programs and the tools for collecting IOPS of each task 
function killMain(){
	

	killWpoint	
	sarpid=$(pidof sar)	
	kill -9 $sarpid
}


# initialize swapping device on disk 
function initMain(){

	swapoff -a
	swapon -a
}

# sync task generator in each VM under an environment without CAGMA
function sync_each_Task_Generator(){	

	ret=1
	echo "I send a packet to controller"
	while [ "$ret" == "1" ]
	do
		# send a packet to port 2392 in hypervisor
		echo hi | nc 203.64.125.101 2392
		ret=`echo $?`	
	done
	
	while [ "$ret" != "hi" ]
	do 
		# set a listener to receive the data from hypervisor
		ret=$(nc -l 2390)
	done
	echo "VM2: i received a packet, ans=$ret"
}

# sync task generator in each VM under an environment with CAGMA
function sync_each_Task_Generator_onCAGMA(){	

	ret=1
	echo "I send a packet to controller"
	while [ "$ret" == "1" ]
	do
		# send a packet to port 2395 in hypervisor
		echo hi | nc 203.64.125.101 2395
		ret=`echo $?`	
	done
	
	while [ "$ret" != "hi" ]
	do 
		# set a listener to receive the data from hypervisor
		ret=$(nc -l 2390)
	done
	echo "VM2: i received a packet for CMA, ans=$ret"
}


# run multiple programs according to the settings of task
function run_experiment(){

	# sync each task generator	
	sync_each_Task_Generator


	# initialize
	initMain
	expTime=30
	prev=0

	# set the length of period of the tools for collecting IOPS
	sar -b -t 3 110 >> ./result/MEM_IOPS.$1 & 
	# set the suffex of the file storing all data
	./FileSuffexSetter $1

	# simulate different memory usages 
	for i in $(seq 1 6)
	do	

		# records the beginning time
		begin=`date +%s`
		diff=0
		
		# increases the number of tasks
		temest=${arrvm2[$i]}
	
		result=$((temest-prev))
		for j in $(seq 1 $result)
		do
			./$wpoint  &
		done
		prev=$temest

		echo "enter $i/5, nrtask: $temest"
		
		# waits for expTime seconds 
		while [ "$diff" -le "$expTime" ]
		do
			# records the end time
			end=`date +%s`
			# calculate current difference between the begining time and the end time
			diff=$((end-begin))
		done
	done
}

# set the action for each round
# In each round, the system begins to initalize some modules and runs experiment.
for i in $(seq 1 5)
do

	# check whether enable_test_CAGMA is enabled
	# if so, it begins to simulate an environment with CAGMA
	if [ "$enable_test_CAGMA" -eq "1" ]; then
		insmod ../Tools/resetCMA/resetCMA.ko 
		rmmod resetCMA.ko
		echo "reset CMA.........done"
		insmod /root/LMAProj2016/supCenter/supCenter.ko 
		echo "install supCenter.........done"	
	fi
 	
	
	echo $i
	# insert a module, which collects the residence time, into guest OS
	insmod ./monitor/MemDataCollector.ko
	# begins to simulate an environment on which multiple programs runs 
	run_experiment $i

	# initialize the number of the main programs at the end of each round
	echo "killing $wpoint process"
	NRmainProg=`pgrep FixedAccMem | wc -l`
	while [ "$NRmainProg" -gt "0" ];
	do
		killWpoint
		NRmainProg=`pgrep FixedAccMem | wc -l`
	done
	echo "killing is done"

	# sync	
	echo "waitfor iops"
	sleep 10	
	echo "waitfor iops......done"
	
	# remove module
	rmmod MemDataCollector.ko


	# sync other task generator 
	if [ "$enable_test_CAGMA" -eq "1" ]; then
		rmmod supCenter.ko

		echo "uninstall supCenter.........done"
		sync_each_Task_Generator_onCAGMA
		echo "I'm ready to test next CAGMA"
		
	else
		sync_each_Task_Generator
	fi

done


