#!/bin/bash 


memUTarget=125
wpoint="accMem"
# expected value  ->  actual value
# 	40 	  -> 	   60
# 	50 	  -> 	   70
# 	60 	  ->       80
# 	70 	  -> 	   90
# 	80 	  -> 	  100 
#      100 	  -> 	  120
#      120     	  ->      140
#      140        ->      150
# The actual constrain needs to be smaller than expected constrain.
# Because the system always doesn't react to changes of memU in time
nrround=5
expTime=720
nrlevel=5
export LD_LIBRARY_PATH=/usr/lib
swapoff -a
swapon -a
echo 3 > /proc/sys/vm/drop_caches

#begin=`date +%s`
#diff=0
#
#    Initialization
#test -e memU && rm -f memU 
#test -e etime && rm -f etime

#./genPattern 0 80 10 >> memU  		# output memUsage pattern
#./genPattern 1 0.1 0.05 >> etime 	# output Execution Time pattern
#arr[1]=137484
arr[1]=229140
#arr[2]=366624
arr[2]=458280
#arr[1]=612452
arr[3]=572850
arr[4]=572850
#arr[3]=412452
iter=0


trap trapContrC INT
function trapContrC(){
	

	for id in $(pidof $wpoint)
	do
		kill -9 $id
	done

	sarpid=$(pidof sar)
	iostatpid=$(pidof iostat)
	vmstatpid=$(pidof vmstat)
	getMEMUpid=$(pidof -x "getMEMU_MEM")
	
	kill -9 $sarpid
	kill -9 $iostatpid
	kill -9 $vmstatpid
	kill -9 $getMEMUpid
	exit	
}

function killMain(){
	

	for id in $(pidof $wpoint)
	do
		kill -9 $id
	done
	
	sarpid=$(pidof sar)
	iostatpid=$(pidof iostat)
	vmstatpid=$(pidof vmstat)
	getMEMUpid=$(pidof -x "getMEMU_MEM")
	
	kill -9 $sarpid
	kill -9 $iostatpid
	kill -9 $vmstatpid
	kill -9 $getMEMUpid
}
function getNRmainProg(){
	
	NRmainProg=0
	
	for i in $(pidof FixedAccMem)
	do
		NRmainProg=$((NRmainProg+1))	
	done 
}

function obtainCurmemU(){

	curFree=`cat /proc/meminfo | awk '$1=="MemFree:"{print $2}'`
	curTotal=`cat /proc/meminfo | awk '$1=="MemTotal:"{print $2}'`
	curSwapFree=`cat /proc/meminfo | awk '$1=="SwapFree:"{print $2}'`
	curSwapTotal=`cat /proc/meminfo | awk '$1=="SwapTotal:"{print $2}'`
	curSwapUsage=$(($curSwapTotal-$curSwapFree))
	curUsage=$(($curTotal-$curFree+$curSwapUsage))
	curmemU=$(($curUsage*100/$curTotal))
	memUdiff=$(($memUTarget-$curmemU))

}

function calc() { awk "BEGIN{print $*}"; }     # set float arithmetic function
echo "begin"
#
#
#: ' 
#function begin()
#{
tempsum=0
count=0
function initMain(){

	sar -b -t 6 160 >> ../output/MEM_IOPS.$1 & 
	iostat -x 6 160 >> ../output/MEM_RPS.$1 &
	#vmstat 6 144 >> ../output/MEM_memUsage.$1 &
	../Tools/getMEMU_MEM 960 $1 &	
}
function begin_to_exper(){

	initMain $1
	#expTime=240
	expTime=240
	#for i in $(seq 1 4)
	for i in $(seq 1 4)
	do
		#echo ${arr[$i]} memUTarget	
	
		begin=`date +%s`
		diff=0
		tempsum=0
		count=1
		temest=$i
	#	if [ "$temest" -gt "15" ]; then
	#		temest=15
	#	fi
		echo "enter $i"
	
		while [ "$diff" -le "$expTime" ]
		do
			
			#NRmainProg=`pgrep FixedAccMem | wc -l`
			#if [ "$NRmainProg" -lt "$temest" ]; then
			#	./$wpoint  &
			#fi
			
			obtainCurmemU
			while [ "$curUsage" -lt "${arr[$i]}" ]
			do
				obtainCurmemU
				#echo $curUsage ${arr[$i]}	
				if [ "$curUsage" -lt "${arr[$i]}" ]; then
					./$wpoint  &
				fi
			done
			end=`date +%s`
			diff=$((end-begin))

		done
		#memUTarget ="${arr[$i]}"
		#echo $memUTarget
		#echo $tempsum $count
	done
	
	killMain
}

for i in $(seq 1 1)
do
	echo $i
	begin_to_exper $i
	ret=1
	while [ "$ret" == "1" ]
	do
		sleep 1
		echo "I send a packet to other"
		echo hi | nc 203.64.125.28 2389 
		ret=`echo $?`
	
	done

done

for id in `pidof $wpoint`
do
	kill $id
done
	

